//
//  ListInteractor.swift
//  ApiTest
//
//  Created by Андрей Лихачев on 20.10.2019.
//  Copyright (c) 2019 Андрей Лихачев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic
{
    func getSessionId()
    func addPost(body: String)
    func editPost(id: String, body: String)
    func removePost(id: String)
}

protocol ListDataStore
{
  //var name: String { get set }
}

class ListInteractor: ListBusinessLogic, ListDataStore
{
  var presenter: ListPresentationLogic?
  var worker: ListWorker?
    
  
    
  // MARK: Do something
   
    func removePost(id: String) {
        worker = ListWorker()
        worker?.removePost(id: id, onSuccess: {
            self.worker?.getPosts(onFail: {
                self.presenter?.showError(message: "Ошибка при получении данных.")
            }, onError: {
                self.presenter?.showConnectionError()
            }) { [weak self] (posts) -> Void in
                self?.presenter?.presentData(response: posts)
            }
        }, onFail: {
            self.presenter?.showError(message: "Ошибка при сохранении данных.")
        }, onError: {
            
        })
    }
    
    func addPost(body: String) {
        worker = ListWorker()
        worker?.createPost(body: body, onSuccess: {
            self.worker?.getPosts(onFail: {
                self.presenter?.showError(message: "Ошибка при получении данных.")
            }, onError: {
                self.presenter?.showConnectionError()
            }) { [weak self] (posts) -> Void in
             self?.presenter?.presentData(response: posts)
            }
        }, onFail: {
            self.presenter?.showError(message: "Ошибка при сохранении данных.")
        }, onError: {
            
        })
    }
    
    func editPost(id: String, body: String) {
        worker = ListWorker()
        worker?.editPost(id: id, body: body, onSuccess: {
            self.worker?.getPosts(onFail: {
                self.presenter?.showError(message: "Ошибка при получении данных.")
            }, onError: {
                self.presenter?.showConnectionError()
            }) { [weak self] (posts) -> Void in
                self?.presenter?.presentData(response: posts)
            }
        }, onFail: {
            self.presenter?.showError(message: "Ошибка при сохранении данных.")
        }, onError: {
            
        })
    }
    
   
    func getSessionId() {
        worker = ListWorker()
        worker?.getSessionId(onSuccess: {
            self.worker?.getPosts(onFail: {
                self.presenter?.showError(message: "Ошибка при получении данных.")
            }, onError: {
                self.presenter?.showConnectionError()
            }) { [weak self] (posts) -> Void in
                self?.presenter?.presentData(response: posts)
               }
        }, onFail: {
            self.presenter?.showError(message: "Ошибка при получении данных сессии.")
        }, onError: {
            
        })
    }
  
}
