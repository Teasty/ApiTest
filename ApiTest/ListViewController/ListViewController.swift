//
//  ListViewController.swift
//  ApiTest
//
//  Created by Андрей Лихачев on 20.10.2019.
//  Copyright (c) 2019 Андрей Лихачев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class
{
    func reloadData(data: [List.Models.ViewModel])
    func showError(message: String)
    func showConnection()
}


protocol ListViewDataLogic: class{
    func edit(id: String, body: String)
    func add(body: String)
}

class ListViewController: UITableViewController
{
  var interactor: ListBusinessLogic?
  var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
    var data: [List.Models.ViewModel]?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListInteractor()
    let presenter = ListPresenter()
    let router = ListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    interactor?.getSessionId()
  }
    
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBAction func newNoteButton(_ sender: Any) {
        let storyBoard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        let newViewController = storyBoard.instantiateViewController(withIdentifier: "NewNote") as! NewNote
        newViewController.viewController = self
        self.present(newViewController, animated: true, completion: nil)
    }
}






// MARK: DisplayLogic, ViewDataLogic Extention

extension ListViewController: ListDisplayLogic, ListViewDataLogic
{
    func edit(id: String, body: String) {
        interactor?.editPost(id: id, body: body)
    }
    
    func add(body: String) {
        interactor?.addPost(body: body)
    }
    
    func showError(message: String) {
        
        let alert = UIAlertController(title: "Произошла ошибка", message: message, preferredStyle: UIAlertController.Style.alert)

        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))

        DispatchQueue.main.async {
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    
    func showConnection(){
        let alert = UIAlertController(title: "Ошибка соединения", message: "Пожалуйста проверьте соединение с интернетом", preferredStyle: UIAlertController.Style.alert)

        alert.addAction(UIAlertAction(title: "Обновить данные", style: UIAlertAction.Style.default){ UIAlertAction in
            self.interactor?.getSessionId()
        })

        DispatchQueue.main.async {
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func reloadData(data: [List.Models.ViewModel]) {
        self.data = data
        DispatchQueue.main.async {
             self.tableView.reloadData()
        }
       
    
    }
}






// MARK: Table Extention

extension ListViewController
{
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.data?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.tableView.dequeueReusableCell(withIdentifier: "NoteCell") as! NoteCell
        
        let viewModel = List.Models.ViewModel(id: data?[indexPath.row].id ?? "", creationDate: data?[indexPath.row].creationDate ?? "01.01.1970", lastEditDate: data?[indexPath.row].lastEditDate ?? "01.01.1970", noteText: data?[indexPath.row].noteText ?? "")
        
        cell.config(viewModel: viewModel)
        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 175.0
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let storyBoard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
        let newViewController = storyBoard.instantiateViewController(withIdentifier: "DetailVC") as! Detail
                self.present(newViewController, animated: true, completion: nil)
        
        let viewModel = List.Models.ViewModel(id: data?[indexPath.row].id ?? "", creationDate: data?[indexPath.row].creationDate ?? "01.01.1970", lastEditDate: data?[indexPath.row].lastEditDate ?? "01.01.1970", noteText: data?[indexPath.row].noteText ?? "")
        
        newViewController.config(viewModel: viewModel)
        newViewController.viewController = self
        
        self.tableView.deselectRow(at: indexPath, animated: true)
    }
    
    
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            if let id = self.data?[indexPath.row].id {
                self.data?.remove(at: indexPath.row)
                tableView.deleteRows(at: [indexPath], with: .fade)
                interactor?.removePost(id: id)
            }
            
        }
    }
}

